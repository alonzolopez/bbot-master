#! /usr/bin/env python


import roslib
import rospy
import actionlib
import random
from bbot import BBotDynamixel
from bbot import BBOTTrajectoryClient
from bbot import bbotAnalysis
from bbot import MixingTaskStateMachine


import math
import numpy as np

from control_msgs.msg import (
	FollowJointTrajectoryAction,
	FollowJointTrajectoryGoal,
	JointTolerance,
)

from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from moveit_msgs.msg import RobotState


def rundemo():
	# d = rospy.Duration.from_sec(60.1)  # One minute and one tenth of a second
   	# seconds = int(d.to_sec() * 1000) 
   	# print(seconds)
	btj = BBOTTrajectoryClient()
	bbot = bbotAnalysis()
	task_space = MixingTaskStateMachine()

	open_grip_angle = math.pi/180.0*9.0 # degrees
	rospy.loginfo("open_grip_angle")
	rospy.loginfo(open_grip_angle)
	close_grip_angle = math.pi/180.0 * 65.0 # degrees
	rospy.loginfo("close_grip_angle")
	rospy.loginfo(close_grip_angle)

	pos = [
	# [0.0, -math.pi/4.0, -math.pi/2.0, math.pi/4.0, 0.0, 0.0, open_grip_angle, 3.0],
	[0.0, 0, -math.pi/2.0, 0.0, 0.0, 0.0, open_grip_angle, 3.0],
	# test rotation of motor 1
	# [0.1, -math.pi/8.0, -math.pi/2.0, 0.0, 0.0, 0.0, open_grip_angle, 5.0],
	# [-0.1, -math.pi/8.0, -math.pi/2.0, 0.0, 0.0, 0.0, open_grip_angle, 7.0],
	# test rotation of motor 2
	# [0.0, 0.0, -math.pi/2.0, 0.0, 0.0, 0.0, open_grip_angle, 5.0],
	# [0.0, -math.pi/4.0, -math.pi/2.0, 0.0, 0.0, 0.0, open_grip_angle, 7.0],
	# test rotation of motor 5
	# [0.0, -math.pi/8.0, -math.pi/2.0, math.pi/4.0, 0.1, 0.0, open_grip_angle, 5.0],
	# [0.0, -math.pi/8.0, -math.pi/2.0, math.pi/4.0, -0.1, 0.0, open_grip_angle, 7.0],
	# test rotation of motor 6
	# [0.0, -math.pi/8.0, -math.pi/2.0, math.pi/4.0, 0.0, 0.1, open_grip_angle, 5.0],
	# [0.0, -math.pi/8.0, -math.pi/2.0, math.pi/4.0, 0.0, -0.1, open_grip_angle, 7.0],
	# test rotation of motor 7
	# [0.0, -math.pi/4.0, -math.pi/2.0, math.pi/4.0, 0.0, 0.0, close_grip_angle, 5.0],
	# [0.0, -math.pi/8.0, -math.pi/2.0, math.pi/4.0, 0.0, 0.0, open_grip_angle-0.1, 7.0],
	]

	result = btj.sendPositionTrajectory(pos, 30)
	rospy.loginfo("Completed. error_code: " + str(result))



if __name__ == '__main__':
	try:
		rospy.init_node('robo_client')
		result = rundemo()
		print(result)
	except rospy.ROSInterruptException:
		print("program interrupted before completion")