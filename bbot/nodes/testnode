#! /usr/bin/env python

import roslib
import rospy
import actionlib
import random
import sys
from bbot import BBOTTrajectoryClient
from bbot import bbotAnalysis
import math
import numpy as np

from control_msgs.msg import (
	FollowJointTrajectoryAction,
	FollowJointTrajectoryGoal,
	JointTolerance,
)
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint

if __name__ == '__main__':
	try:
		rospy.init_node('robo_client')
		btj = BBOTTrajectoryClient()
		ikfk = bbotAnalysis()
		# elements at indices 0-5 inclusive correspond to joint commands
		# element at index 6 is the time argument for that waypoint
		M = np.matrix([
			[0,-1,0,0.0625],
			[0,0,1,0.2082],
			[-1,0,0,0.07425],
			[0,0,0,1]
			]) # t1 = 90, t2 = -45, t3 = -45, t6 = 90
		ikfk.IK(M,[[-1,1,-1,1]]) # which configuration to use, so far [-1,1,-1,1] is best
		jtangles = ikfk.iksols.tolist() #puts IK solution into list indices 0-5
		jtangles[0].append(3.0) #add time arugment at index 6
		pos = []
		pos.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1])
		# pos.append([0.0, 0.0, -1.517, 0.0, 0.0, 0.0, 1.0, 3.0])
		pos.append(jtangles[0])

		result = btj.sendPositionTrajectory(pos, 30)
		rospy.loginfo("Completed. error_code: " + str(result))
	except rospy.ROSInterruptException:
		rospy.loginfo("program interrupted before completion")
