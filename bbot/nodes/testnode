#! /usr/bin/env python

import roslib
import rospy
import actionlib
import random
import sys
from bbot import BBOTTrajectoryClient
from bbot import bbotAnalysis
import math
import numpy as np

from control_msgs.msg import (
	FollowJointTrajectoryAction,
	FollowJointTrajectoryGoal,
	JointTolerance,
)
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint

if __name__ == '__main__':
	try:
		rospy.init_node('robo_client')
		btj = BBOTTrajectoryClient()
		ikfk = bbotAnalysis()
		# elements at indices 0-5 inclusive correspond to joint commands
		# element at index 6 is the time argument for that waypoint
		# M = np.matrix([
		# 	[0,0,1,0.4357],
		# 	[0,1,0,.1031],
		# 	[-1,0,0,0.1662],
		# 	[0,0,0,1]
		# 	])

		### TESTING IK 
		# ikfk.IK(M,[[-1,1,-1,1]])
		# jtangles = ikfk.iksols.tolist() #puts IK solution into list indices 0-5
		# jtangles[0].append(3.0) #add time arugment at index 6

		pos = []
		ninety = 1.57
		angle = 1.047

		### Two different starting configs. 1 for jts 1, 5, 6 and another for jts 2, 3, 4
		# Joint 1 60 degree turn
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 20.0])
		# pos.append([angle, 0.0, -ninety, 0.0, 0.0, 0.0, 21.0])
		# pos.append([angle, 0.0, -ninety, 0.0, 0.0, 0.0, 30.0])


		# # Joint 2 30 degrees up
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 20.0])
		# pos.append([0.0, angle/3, -ninety, 0.0, 0.0, 0.0, 21.0])
		# pos.append([0.0, angle/3, -ninety, 0.0, 0.0, 0.0, 30.0])

		# # Joint 2 REAL 30 degrees up
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 5.0])
		# pos.append([0.0, angle/3, -ninety, 0.0, 0.0, 0.0, 6.0])
		# pos.append([0.0, angle/3, -ninety, 0.0, 0.0, 0.0, 10.0])

		# # Joint3 60 degrees up
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 20.0])
		# pos.append([0.0, 0.0, -ninety+angle, 0.0, 0.0, 0.0, 21.0])
		# pos.append([0.0, 0.0, -ninety+angle, 0.0, 0.0, 0.0, 30.0])

		# # Joint3 REAL 60 degrees up
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 5.0])
		# pos.append([0.0, 0.0, -ninety+angle, 0.0, 0.0, 0.0, 6.0])
		# pos.append([0.0, 0.0, -ninety+angle, 0.0, 0.0, 0.0, 10.0])

		# # Joint 4 60 degrees up
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 20.0])
		# pos.append([0.0, 0.0, -ninety, angle, 0.0, 0.0, 21.0])
		# pos.append([0.0, 0.0, -ninety, angle, 0.0, 0.0, 30.0])

		# # Joint 4 REAL 60 degrees up
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 5.0])
		# pos.append([0.0, 0.0, -ninety, angle, 0.0, 0.0, 6.0])
		# pos.append([0.0, 0.0, -ninety, angle, 0.0, 0.0, 10.0])

		# # Joint 5 60 degrees yaw
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 20.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, angle, 0.0, 21.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, angle, 0.0, 30.0])

		# # Joint 5 REAL 60 degrees yaw
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 5.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, angle, 0.0, 6.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, angle, 0.0, 10.0])

		# # Joint 6 60 degrees roll
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 20.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, -angle, 21.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, -angle, 30.0])

		# # Joint 6 REAL 60 degrees roll
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 2.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, 0.0, 5.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, -angle, 6.0])
		# pos.append([0.0, 0.0, -ninety, 0.0, 0.0, -angle, 10.0])

		#### Full trajectory
		posB = [0.0, 0.0, -1.57, 0.0, 0.0, 0.0] #initial position
		posC = [-0.20312473, -0.68947868, -0.52251674, -0.35880092, -0.20312473, 0.0] #above cup1
		posDpre = [-0.27235946, -1.16208201, -1.58409576,  1.17538145, -0.27235946, 0.0] #pre cup 1 (x offset)
		posD = [-0.20312473, -1.39509709, -1.0213237, 0.84562446, -0.20312473, 0.0] #at cup 1
		posH = [1.44449097,  0.21886201, -1.59762382, -0.19203451, 1.44449097, 0.0] #mixing cup location
		posI = [1.44449097,  0.21886201, -1.59762382, -0.19203451, 1.44449097, 1.57] #dump over mix cup

		pos.append(posB + [5.0])
		pos.append(posC + [10.0])
		pos.append(posDpre + [15.0])
		pos.append(posD + [20.0])
		pos.append(posC + [25.0])
		pos.append(posH + [30.0])
		pos.append(posI + [35.0])
		pos.append(posH + [40.0])
		pos.append(posC + [45.0])
		pos.append(posD + [50.0])
		pos.append(posDpre + [55.0])
		pos.append(posB + [60.0])

		# pos.append(jtangles[0])

		vels = []
		for i in range(len(pos)):
			vels.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

		result = btj.sendVelocityTrajectory(pos, vels, 60)
		rospy.loginfo("Completed. error_code: " + str(result))
	except rospy.ROSInterruptException:
		rospy.loginfo("program interrupted before completion")
